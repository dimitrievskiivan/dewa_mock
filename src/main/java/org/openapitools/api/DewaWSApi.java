/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Upload;
import org.openapitools.model.UploadResponse;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.*;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-26T18:06:25.282Z[Etc/UTC]")
@Validated
@Api(value = "dewaWS", description = "the dewa-W.S. API")
public interface DewaWSApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /dewaWS/operation/upload.json
     *
     * @param body Request body (required)
     * @return successful operation (status code 200)
     *         or error (status code 503)
     */
    @ApiOperation(value = "", nickname = "uploadJson", notes = "", response = UploadResponse.class, tags={  })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "successful operation", response = UploadResponse.class),
        @ApiResponse(code = 503, message = "error") })
    @PostMapping(
        value = "/dewaWS/operation/uploadJson",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<UploadResponse> uploadJson(@ApiParam(value = "Request body" ,required=true )  @Valid @RequestBody Upload body) {
        NativeWebRequest request = getRequest().get();

            String[][] errorCodes = {
                    {"-1","Il campo obbligatorio <nome_campo> non e’ presente"},
                    {"-2","La lunghezza massima per il campo <nome_campo> non e’ rispettata"},
                    {"-3","Il valore del campo <nome_campo> non e’ valido"},
                    {"-4","Formato data per il campo <nome_campo> non corretto"},
                    {"-5","La coppia di valori Tipo documento/sottocategoria non sono presenti in anagrafica"},
                    {"-6","Il codice cliente non è presente in anagrafica, oppure l’utente non ha accesso a tale cliente"},
                    {"-7","L’utente non ha diritti di inserimento/modifica per la specifica tipologia di documento"},
                    {"-8","L’utente non ha diritti di accesso al documento di cui ha richiesto il download"},
                    {"-9","Utente non presente su DEWA"},
                    {"-10","L’utente è presente su DEWA, ma è stato disabilitato dall’amministratore o dal sistema per superato limite di tempo dopo l’ultimo login"},
                    {"-11","La password dell’utente è scaduta"},
                    {"-12","Il documento richiesto non è presente nel repository"},
                    {"-13","Il token non è corretto perché è scaduto, oppure non è valido"},
                    {"-14","Il documento è marcato come riservato dall’owner."},
                    {"-100","Errore generico ( con dettaglio )"},
            };

            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    // for one of the convalida and one of the aria orders we go in error
                    if (body.getTitle().equalsIgnoreCase("1.xml") ||
                            body.getTitle().equalsIgnoreCase("5.xml")
                    ){
                        int random = new Random().nextInt(15);
                        String responseString = "{\"codiceErrore\":\""+errorCodes[random][0]+
                                "\",\"descrizioneErrore\":\""+ errorCodes[random][1] +"\"," +
                                "\"dettaglioErrore\":\""+ errorCodes[random][1]+"\"}";
                        ApiUtil.setExampleResponse(request, "application/json", responseString);
                        request.getNativeResponse(HttpServletResponse.class).setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                    }
                    else{
                        String dewaId = UUID.randomUUID().toString().substring(0,16);
                        String responseString = "{ \"versione\" : \"99999\", \"idDctm\" : \"" + dewaId + "\" }";
                        ApiUtil.setExampleResponse(request, "application/json", responseString);
                        return new ResponseEntity<>(HttpStatus.OK);
                    }
                }
            };
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }



}
